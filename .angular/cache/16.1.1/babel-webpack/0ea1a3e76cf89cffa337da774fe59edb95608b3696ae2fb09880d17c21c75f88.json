{"ast":null,"code":"import { UserStorageService } from '../../auth-services/storage-service/user-storage.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/material/snack-bar\";\nclass AdminGuard {\n  constructor(router, snackBar) {\n    this.router = router;\n    this.snackBar = snackBar;\n  }\n  canActivate(next, state) {\n    if (UserStorageService.isCustomerLoggedIn()) {\n      this.router.navigateByUrl('/customer/dashboard');\n      this.snackBar.open(`You don't have access to this page!`, 'ERROR', {\n        duration: 5000\n      });\n      return false;\n    } else if (!UserStorageService.hasToken()) {\n      UserStorageService.signOut();\n      this.router.navigateByUrl('/login');\n      this.snackBar.open('You are not logged in. Please login first!', 'ERROR', {\n        duration: 5000\n      });\n      return false;\n    }\n    return true;\n  }\n}\nAdminGuard.ɵfac = function AdminGuard_Factory(t) {\n  return new (t || AdminGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.MatSnackBar));\n};\nAdminGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AdminGuard,\n  factory: AdminGuard.ɵfac,\n  providedIn: 'root'\n});\nexport { AdminGuard };","map":{"version":3,"names":["UserStorageService","AdminGuard","constructor","router","snackBar","canActivate","next","state","isCustomerLoggedIn","navigateByUrl","open","duration","hasToken","signOut","i0","ɵɵinject","i1","Router","i2","MatSnackBar","factory","ɵfac","providedIn"],"sources":["/Users/aishaoyinkansola/Desktop/Projects/E-commerce final project/E-commerce_BAZON_UI/src/app/auth/auth-guards/authAdmin/admin.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { UserStorageService } from '../../auth-services/storage-service/user-storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminGuard implements CanActivate {\n\n  constructor(private router: Router, private snackBar: MatSnackBar) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n\n    if (UserStorageService.isCustomerLoggedIn()) {\n      this.router.navigateByUrl('/customer/dashboard');\n      this.snackBar.open(`You don't have access to this page!`, 'ERROR', {\n        duration: 5000\n      });\n      return false;\n    } else if (!UserStorageService.hasToken()) {\n      UserStorageService.signOut();\n      this.router.navigateByUrl('/login');\n      this.snackBar.open('You are not logged in. Please login first!', 'ERROR', {\n        duration: 5000\n      });\n      return false;\n    }\n\n    return true;\n  }\n}"],"mappings":"AAGA,SAASA,kBAAkB,QAAQ,0DAA0D;;;;AAE7F,MAGaC,UAAU;EAErBC,YAAoBC,MAAc,EAAUC,QAAqB;IAA7C,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,QAAQ,GAARA,QAAQ;EAAiB;EAErEC,WAAWA,CACTC,IAA4B,EAC5BC,KAA0B;IAG1B,IAAIP,kBAAkB,CAACQ,kBAAkB,EAAE,EAAE;MAC3C,IAAI,CAACL,MAAM,CAACM,aAAa,CAAC,qBAAqB,CAAC;MAChD,IAAI,CAACL,QAAQ,CAACM,IAAI,CAAC,qCAAqC,EAAE,OAAO,EAAE;QACjEC,QAAQ,EAAE;OACX,CAAC;MACF,OAAO,KAAK;KACb,MAAM,IAAI,CAACX,kBAAkB,CAACY,QAAQ,EAAE,EAAE;MACzCZ,kBAAkB,CAACa,OAAO,EAAE;MAC5B,IAAI,CAACV,MAAM,CAACM,aAAa,CAAC,QAAQ,CAAC;MACnC,IAAI,CAACL,QAAQ,CAACM,IAAI,CAAC,4CAA4C,EAAE,OAAO,EAAE;QACxEC,QAAQ,EAAE;OACX,CAAC;MACF,OAAO,KAAK;;IAGd,OAAO,IAAI;EACb;;AAzBWV,UAAU,C;mBAAVA,UAAU,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;AAAA;AAAVlB,UAAU,C;SAAVA,UAAU;EAAAmB,OAAA,EAAVnB,UAAU,CAAAoB,IAAA;EAAAC,UAAA,EAFT;AAAM;SAEPrB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}