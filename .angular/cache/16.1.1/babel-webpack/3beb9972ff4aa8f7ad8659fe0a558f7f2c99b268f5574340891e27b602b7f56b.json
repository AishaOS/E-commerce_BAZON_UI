{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { tap, map, catchError, throwError, of } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { UserStorageService } from '../storage-service/user-storage.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../storage-service/user-storage.service\";\nconst BASIC_URL = environment['BASIC_URL'];\nexport const AUTH_HEADER = 'authorization';\nclass AuthService {\n  constructor(http, userStorageService) {\n    this.http = http;\n    this.userStorageService = userStorageService;\n  }\n  login(username, password) {\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n    const body = {\n      username,\n      password\n    };\n    return this.http.post(BASIC_URL + 'authenticate', body, {\n      headers,\n      observe: 'response'\n    }).pipe(map(res => {\n      const token = res.headers.get(AUTH_HEADER)?.substring(7);\n      const user = res.body;\n      if (token && user) {\n        this.userStorageService.saveToken(token);\n        this.userStorageService.saveUser(user);\n        return true;\n      }\n      return false;\n    }), catchError(error => {\n      console.error('Login Error:', error);\n      return throwError(error);\n    }));\n  }\n  register(signupRequest) {\n    return this.http.post(BASIC_URL + \"sign-up\", signupRequest);\n  }\n  getUserById() {\n    const userId = UserStorageService.getUserId();\n    return this.http.get(`${BASIC_URL}api/user/${userId}`, {\n      headers: this.createAuthorizationHeader()\n    }).pipe(tap(_ => this.log('User Fetched successfully')), catchError(this.handleError('Error Fetching User', [])));\n  }\n  updateUser(data) {\n    return this.http.post(`${BASIC_URL}api/update`, data, {\n      headers: this.createAuthorizationHeader()\n    }).pipe(tap(_ => this.log('User Updated successfully')), catchError(this.handleError('Error Updating User', [])));\n  }\n  updatePassword(changePasswordDto) {\n    changePasswordDto.id = UserStorageService.getUserId();\n    return this.http.post(`${BASIC_URL}api/updatePassword`, changePasswordDto, {\n      headers: this.createAuthorizationHeader()\n    }).pipe(tap(_ => this.log('Password Updated successfully')), catchError(this.handleError('Error Updating Password', [])));\n  }\n  // Track Order\n  getOrderByTrackingId(trackingId) {\n    return this.http.get(`${BASIC_URL}order/${trackingId}`);\n  }\n  createAuthorizationHeader() {\n    return new HttpHeaders().set('Authorization', 'Bearer ' + UserStorageService.getToken());\n  }\n  log(message) {\n    console.log(`User Auth Service: ${message}`);\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.error(error);\n      this.log(`${operation} failed: ${error.message}`);\n      return of(result);\n    };\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserStorageService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["HttpHeaders","tap","map","catchError","throwError","of","environment","UserStorageService","BASIC_URL","AUTH_HEADER","AuthService","constructor","http","userStorageService","login","username","password","headers","set","body","post","observe","pipe","res","token","get","substring","user","saveToken","saveUser","error","console","register","signupRequest","getUserById","userId","getUserId","createAuthorizationHeader","_","log","handleError","updateUser","data","updatePassword","changePasswordDto","id","getOrderByTrackingId","trackingId","getToken","message","operation","result","i0","ɵɵinject","i1","HttpClient","i2","factory","ɵfac","providedIn"],"sources":["/Users/aishaoyinkansola/Desktop/Projects/E-commerce final project/E-commerce_BAZON_UI/src/app/auth/auth-services/auth-service/auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { tap, map, Observable, catchError, throwError, of } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { UserStorageService } from '../storage-service/user-storage.service';\r\n\r\nconst BASIC_URL = environment['BASIC_URL'];\r\nexport const AUTH_HEADER = 'authorization';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userStorageService: UserStorageService\r\n  ) { }\r\n\r\n  login(username: string, password: string): any {\r\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n    const body = { username, password };\r\n\r\n    return this.http.post(BASIC_URL + 'authenticate', body, { headers, observe: 'response' }).pipe(\r\n      map((res) => {\r\n        const token = res.headers.get(AUTH_HEADER)?.substring(7);\r\n        const user = res.body;\r\n        if (token && user) {\r\n          this.userStorageService.saveToken(token);\r\n          this.userStorageService.saveUser(user);\r\n          return true;\r\n        }\r\n        return false;\r\n      }),\r\n      catchError((error) => {\r\n        console.error('Login Error:', error);\r\n        return throwError(error);\r\n      })\r\n    );\r\n  }\r\n\r\n  register(signupRequest: any): Observable<any> {\r\n    return this.http.post(BASIC_URL + \"sign-up\", signupRequest);\r\n  }\r\n\r\n  getUserById(): Observable<any> {\r\n    const userId = UserStorageService.getUserId();\r\n    return this.http.get<[]>(`${BASIC_URL}api/user/${userId}`, {\r\n      headers: this.createAuthorizationHeader(),\r\n    }).pipe(\r\n      tap((_) => this.log('User Fetched successfully')),\r\n      catchError(this.handleError<[]>('Error Fetching User', []))\r\n    );\r\n  }\r\n\r\n  updateUser(data): Observable<any> {\r\n    return this.http.post<[]>(`${BASIC_URL}api/update`, data, {\r\n      headers: this.createAuthorizationHeader(),\r\n    }).pipe(\r\n      tap((_) => this.log('User Updated successfully')),\r\n      catchError(this.handleError<[]>('Error Updating User', []))\r\n    );\r\n  }\r\n\r\n  updatePassword(changePasswordDto: any): Observable<any> {\r\n    changePasswordDto.id = UserStorageService.getUserId();\r\n    return this.http.post<[]>(`${BASIC_URL}api/updatePassword`, changePasswordDto, {\r\n      headers: this.createAuthorizationHeader(),\r\n    }).pipe(\r\n      tap((_) => this.log('Password Updated successfully')),\r\n      catchError(this.handleError<[]>('Error Updating Password', []))\r\n    );\r\n  }\r\n\r\n  // Track Order\r\n\r\n  getOrderByTrackingId(trackingId: number): Observable<any> {\r\n    return this.http.get<[]>(`${BASIC_URL}order/${trackingId}`)\r\n  }\r\n\r\n  private createAuthorizationHeader(): HttpHeaders {\r\n    return new HttpHeaders().set(\r\n      'Authorization',\r\n      'Bearer ' + UserStorageService.getToken()\r\n    );\r\n  }\r\n\r\n  private log(message: string): void {\r\n    console.log(`User Auth Service: ${message}`);\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T): any {\r\n    return (error: any): Observable<T> => {\r\n      console.error(error);\r\n      this.log(`${operation} failed: ${error.message}`);\r\n      return of(result as T);\r\n    };\r\n  }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}